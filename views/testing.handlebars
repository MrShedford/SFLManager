<h1>Testing</h1>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

<script>
    var customInterpolationApp = angular.module('customInterpolationApp', ['ngSanitize']);

    customInterpolationApp.config(function($interpolateProvider) {
        $interpolateProvider.startSymbol('//');
        $interpolateProvider.endSymbol('//');
    });


    customInterpolationApp.controller('DemoController', function($scope, $http) {
        var professor = document.getElementById('postUserName').innerHTML;
        $http.get("/classes/store", {
            params: {
                "creator": professor
            }
        }).then(function(response) {
            $scope.myData = response.data;
        });
    });
    //Same as above because I need a second controller just to get the module names for the drop down form menu
    customInterpolationApp.controller('uploadingAssignment', function($scope, $http) {
        var professor = document.getElementById('postUserName').innerHTML;
        $http.get("/classes/store", {
            params: {
                "creator": professor
            }
        }).then(function(response) {
            $scope.myData = response.data;
        });
    });
    //This is used for returning the assignments the teacher has created
    customInterpolationApp.controller('returnAssignment', function($scope, $http) {
        var professor = document.getElementById('postUserName').innerHTML;
        $http.get("/classes/returnAssignments", {
            params: {
                "creator": professor
            }
        }).then(function(response) {
            $scope.assignments = response.data;
            //$scope.text = response.data.text;
        });
    });

</script>
<script src="/js/bootstrap.js"></script>
<script src="/js/functions.js"></script>

<script src="/js/jquery.js">


</script>

<!-- The following line of code should be uncommented for use with electron in generating desktop application -->
<!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js" onload="window.$ = window.jQuery = module.exports;"></script> -->

<script src="/js/annotator.js">


</script>
<script src="/js/highlighter.js">


</script>
<script src="/js/rainbow-custom.min.js"></script>

<script src="/js/raphael.js">
    // Treant related

</script>
<script src="/js/Treant.js">
    // Treant related

</script>
<script src="/js/js.cookie.js"></script>

<script src="js/taggle.min.js"></script>
<script src="/js/jquery-ui.js">


</script>

<script src="/js/main.js"></script>

<script type="text/coffeescript">
    # Attept at error handling for touch devices. window.onerror = (msg, file, line) -> alert(msg + ' ' + file + ' ' + line) jQuery.ajaxSetup async: false modules = jQuery.trim """ touch touch/utils touch/editor touch/viewer """ modules = modules.split(/\s+/) run = (file, source) -> filename = file.replace /coffee$/, "js" compiled = "#{CoffeeScript.compile(source)}\n//@ sourceURL=#{filename}" eval(compiled) sources = ("./src/#{script}.coffee" for script in modules) requests = jQuery.map sources, (script) -> jQuery.get script, jQuery.proxy(run, this, script) jQuery.when.apply(jQuery, requests).done -> jQuery("#content").annotator().annotator('addPlugin', 'Touch', { force: location.search.indexOf('force') > -1, useHighlighter: location.search.indexOf('highlighter') > -1 }) window.annotator = jQuery("#content").data('annotator')
</script>


<script src="https://code.angularjs.org/1.5.2/angular.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular-sanitize/1.6.5/angular-sanitize.js"></script>


<div ng-app="customInterpolationApp">
    <h2 id="postUserName" class="align">Dashboard</h2>
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="tabbable-panel" id="scrolly">
                    <div class="tabbable-line">
                        <ul class="nav nav-tabs ">
                            <li class="active">
                                <a href="#tab_default_1" data-toggle="tab">
							Create Class </a>
                            </li>
                            <li>
                                <a href="#tab_default_2" data-toggle="tab">
							View Classes </a>
                            </li>
                            <li>
                                <a href="#tab_default_3" data-toggle="tab">
							Create Assignment </a>
                            </li>
                            <li>
                                <a href="#tab_default_4" data-toggle="tab">
							View Assignments </a>
                            </li>
                            <li>
                                <a href="#tab_default_5" data-toggle="tab">
							Testing Annotator </a>
                            </li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="tab_default_1">
                                <p class="align">Enter Class Details below:</p>
                                <form method="post" action="/classes/register">
                                    <div class="form-group">
                                        <label>Module Code</label>
                                        <input type="text" class="form-control" placeholder="e.g. CS230" name="modulecode">
                                    </div>
                                    <div class="form-group">
                                        <label>Module Name</label>
                                        <input type="text" class="form-control" placeholder="e.g. Web Infromation Processing" name="modulename">
                                    </div>
                                    <div class="form-group">
                                        <!--<label class="hiding">Professor</label> -->
                                        <input type="text" class="form-control" placeholder="e.g. Prof. John Keating" name="moduleprofessor" id="moduleprofessor">
                                    </div>
                                    <div class="form-group">
                                        <label>Key for Students</label>
                                        <input type="text" class="form-control" placeholder="e.g. CS230JKMU" name="modulekey" id="modulekey">
                                    </div>

                                    <button type="submit" class="btn btn-default">Submit</button>
                                </form>

                            </div>
                            <div class="tab-pane" id="tab_default_2">
                                <div ng-controller="DemoController as demo">
                                    <table style="width:auto" class="table">
                                        <tr>
                                            <th>Professor</th>
                                            <th>Module Name</th>
                                            <th>Module Code</th>
                                            <th>Module Key</th>
                                        </tr>
                                        <tr ng-repeat="x in myData">
                                            <td>//x.creator//</td>
                                            <td>//x.className//</td>
                                            <td>//x.classCode//</td>
                                            <td>//x.classKey //</td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                            <div class="tab-pane" id="tab_default_3" ng-controller="uploadingAssignment">
                                <div ng-controller="uploadingAssignment">
                                    <form method="post" action="/classes/test" encType="multipart/form-data">
                                        <div class="form-group">
                                            <label>Username</label>
                                            <input type="text" class="form-control" name="username2" placeholder="Admin_S" id="username2">
                                        </div>
                                        <div class="form-group">
                                            <label>Module</label><br>
                                            <select name="module" class="form-control">
                            <option ng-repeat="x in myData" >//x.classCode//</option>
                        </select>
                                        </div>
                                        <div class="form-group">
                                            <label>Title</label><br>
                                            <input type="text" class="form-control" name="title" placeholder="Annotate this piece of text">
                                        </div>
                                        <div class="form-group">
                                            <label>Description</label><br>
                                            <textarea rows="4" cols="50" name="description" class="form-control">
                            </textarea>
                                        </div>
                                        <div class="form-group">
                                            <label>Text File (if needed)</label>
                                            <input type="file" class="form-control" name="file" placeholder="assignment.txt" id="files">
                                        </div>
                                        <div class="form-group">
                                            <button type="button" class="form-control" id="sean">Send Text</button>
                                        </div>
                                        <div class="form-group">
                                            <label>Text Area</label><br>
                                            <textarea rows="4" cols="80" id="name" name="assignmentText"></textarea>
                                        </div>

                                        <button type="submit" class="btn btn-default">Submit</button>
                                    </form>
                                </div>
                            </div>
                            <div class="tab-pane" id="tab_default_4">
                                <div ng-controller="returnAssignment">
                                    <table style="width:100%" class="table" id="assignmentsTable">
                                        <tr>
                                            <th>#</th>
                                            <th>Module</th>
                                            <th>Professor</th>
                                            <th>Title</th>
                                            <th>Date</th>
                                            <th>Edit Clauses</th>
                                        </tr>
                                        <tr ng-repeat="x in assignments" onclick="modalClauses(this)">
                                            <td>//$index +1//</td>
                                            <td>//x.module//</td>
                                            <td>//x.creator//</td>
                                            <td ng-bind-html="x.title"></td>
                                            <td>//x.date//</td>
                                            <td ng-bind-html="x.text" style="display:none;"></td>
                                            <td ng-bind-html="x.description" style="display:none;"></td>
                                            <td><button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Edit Clauses and Text</button></td>
                                        </tr>
                                    </table>

                                    <div id="myModal" class="modal fade" role="dialog">
                                        <div class="modal-dialog">

                                            <!-- Modal content-->
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                    <h4 id="modalTitle" class="modal-title" style="text-align:center;">Edit Clauses</h4><br>
                                                    <h5 id="modalDescription" class="modal-title" style="text-align:center;"></h5>
                                                </div>
                                                <div class="modal-body">
                                                    <div id="modalText" style="font-size:150%" contenteditable="true"></div>

                                                </div>
                                                <div class="modal-footer">
                                                    <input id="keypadDisplay" class="form-control" type="" value="" name="ipbox" readonly>
                                                    <button id="keypad_clear" class="btn btn-default">Clear Display</button>
                                                    <button type="button" class="btn btn-default" id="jBold">Insert Clause</button>
                                                    <button type="button" class="btn btn-default" id="saveClause">Save</button>
                                                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                                </div>

                                                <div class="modal-footer">
                                                    <div>
                                                        <table id="keypadLayout">
                                                            <tr>
                                                                <td><button id="keypad_x" class="keypadButton">x</button></td>
                                                                <td><button id="keypad_v" class="keypadButton">v</button></td>
                                                                <td><button id="keypad_i" class="keypadButton">i</button></td>
                                                            </tr>
                                                            <tr>
                                                                <td><button id="keypad_7" class="keypadButton">7</button></td>
                                                                <td><button id="keypad_8" class="keypadButton">8</button></td>
                                                                <td><button id="keypad_9" class="keypadButton">9</button></td>
                                                            </tr>
                                                            <tr>
                                                                <td><button id="keypad_4" class="keypadButton">4</button></td>
                                                                <td><button id="keypad_5" class="keypadButton">5</button></td>
                                                                <td><button id="keypad_6" class="keypadButton">6</button></td>
                                                            </tr>
                                                            <tr>
                                                                <td><button id="keypad_1" class="keypadButton">1</button></td>
                                                                <td><button id="keypad_2" class="keypadButton">2</button></td>
                                                                <td><button id="keypad_3" class="keypadButton">3</button></td>
                                                                <tr>
                                                                    <td><button id="keypad_r" class="keypadButton">(-)</button></td>
                                                                    <td><button id="keypad_0" class="keypadButton">0</button></td>
                                                                    <td><button id="keypad_s" class="keypadButton">[-]</button></td>
                                                                </tr>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="tab-pane" id="tab_default_5" ng-controller="uploadingAssignment">
                                <p id="tempStore1"></p>

                                <h1 id="AnalysisMode" style="text-align: center; font-size: 56px;">Functional Grammar Analysis Mode</h1>

                                <div id="content">
                                    <p>One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly <big>domed</big> and divided by arches into stiff sections. The bedding was hardly able to cover it and seemed ready to slide off any moment. His many legs, pitifully thin compared with the size of the rest of him, waved about helplessly as he looked.</p>

                                    <p>"What's happened to me?" he thought. It wasn't a dream. His room, a proper human room although a little too small, lay peacefully between its four familiar walls. A collection of textile samples lay spread out on the table - Samsa was a travelling salesman - and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame. It showed a lady fitted out with a fur hat and fur boa who sat upright, raising a heavy fur muff that covered the whole of her lower arm towards the viewer. In a high altitude emergency an oxygen mask will drop in front of you from the panel above.</p>

                                    <p>Gregor then turned to look out the window at the dull weather. Drops of rain could be heard hitting the pane, which made him feel quite sad. "How about if I sleep a little bit longer and forget all this nonsense", he thought, but that was something he was unable to do because he was used to sleeping on his right, and in his present state couldn't get into that position. However hard he threw himself onto his right, he always rolled back to where he was. He must have tried it a hundred times, shut his eyes so that he wouldn't have to look at the floundering legs, and only stopped when he began to feel a mild, dull pain there that he had never felt before. They are watching a movie now, and Jane is at a sleepover Birthday party. One morning I shot an elephant in my pajamas. as I saw some cute things.</p>
                                </div>

                                <div id="content2" style="display: none;">
                                    <p>One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly <big>domed</big> and divided by arches into stiff sections. The bedding was hardly able to cover it and seemed ready to slide off any moment. His many legs, pitifully thin compared with the size of the rest of him, waved about helplessly as he looked.</p>

                                    <p>"What's happened to me?" he thought. It wasn't a dream. His room, a proper human room although a little too small, lay peacefully between its four familiar walls. A collection of textile samples lay spread out on the table - Samsa was a travelling salesman - and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame. It showed a lady fitted out with a fur hat and fur boa who sat upright, raising a heavy fur muff that covered the whole of her lower arm towards the viewer. In a high altitude emergency an oxygen mask will drop in front of you from the panel above.</p>

                                    <p>Gregor then turned to look out the window at the dull weather. Drops of rain could be heard hitting the pane, which made him feel quite sad. "How about if I sleep a little bit longer and forget all this nonsense", he thought, but that was something he was unable to do because he was used to sleeping on his right, and in his present state couldn't get into that position. However hard he threw himself onto his right, he always rolled back to where he was. He must have tried it a hundred times, shut his eyes so that he wouldn't have to look at the floundering legs, and only stopped when he began to feel a mild, dull pain there that he had never felt before. They are watching a movie now, and Jane is at a sleepover Birthday party. One morning I shot an elephant in my pajamas. as I saw some cute things.</p>
                                </div>

                                <!-- <div id="example1" style="width:100px;height:100px"></div> -->
                                <div style="align-content:center;width:100%;text-align: center;">
                                    <p><button class="button" id="generateTrees" onclick="loadDataForTrees(addTreesToDocument,'1');">Generate Trees</button></p>

                                    <p><button class="button" id="generateBoxes" onclick="loadDataForTrees(addBoxDiagramsToDocument,'1');">Generate Box Diagrams</button></p>

                                    <p><button class="button" id="generateTheme" onclick="loadDataForTrees(addThemeDiagramsToDocument,'1t');">Generate Theme Diagrams</button></p>

                                    <p><button class="button" id="themeAnalyse" onclick="enterThemeMode();">Theme Analysis mode</button></p>

                                    <p><button class="button" id="grammarAnalyse" style="display: none;" onclick="enterGrammarMode();">Grammar Analysis mode</button></p>
                                </div>

                                <div id="allBoxes" style="display: none;">
                                    <!--Container to hold box diagrams-->
                                </div>

                                <div id="allTrees" style="display:none;">
                                    <!--Container to hold tree-->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function enterThemeMode() {
        currentUrl = "1t";
        $('#AnalysisMode').fadeOut(250, function() {
            $(this).text('Theme Analysis Mode');
            $(this).fadeIn(250, function() {
                $('#content').hide(1000, function() {
                    $('#content2').show(1000, function() {
                        $('#themeAnalyse').hide(100, function() {
                            $('#grammarAnalyse').show(100);
                        });
                    });
                });
            });
        });
    }


    function enterGrammarMode() {
        currentUrl = "1";
        $('#AnalysisMode').fadeOut(250, function() {
            $(this).text('Functional Grammar Analysis Mode');
            $(this).fadeIn(250, function() {
                $('#content2').hide(1000, function() {
                    $('#content').show(1000, function() {
                        $('#grammarAnalyse').hide(100, function() {
                            $('#themeAnalyse').show(100);
                        });
                    });
                });
            });
        });
    }


    jQuery(document).ready(function() {
        // Load the annotations from the database.
        loadFromDatabase("1", "content", loadFromDatabase("1t", "content2", function() {}));

        console.log("Successful Load");
    });


    function loadFromDatabase(url, container, callback) {
        var a = url;
        var post_data = {
            url: a
        };
        //jQuery.post("./annotations/load.php", post_data, function(data) {
        jQuery.post("/annotations_load", post_data, function(data) {
            if (data === 0) {
                console.log("Error connecting to Database");
                return;
            }
            data = JSON.parse(data);

            // This loop saves the taggle instance of each annotation
            // as a JSON string which can be used by my version of annotator
            for (var i = 0, len = data.length; i < len; i++) {
                data[i].text = JSON.stringify(data[i].text);
            }
            var ann = jQuery("#" + container).annotator(); //Assign container to hold annotator content     
            ann.annotator('addPlugin', 'Storage'); // Add Storage Plugin

            ann.annotator('loadAnnotations', data); // Load them to the screen[display them as highlights].
            callback;
        });
    }



    Annotator.Plugin.Storage = function(element) {
        return {
            pluginInit: function() {
                this.annotator.subscribe("beforeAnnotationCreated", function(annotation) {}).subscribe("annotationCreated", function(annotation) {
                        if (annotation.quote.length > 0 && annotation.text.length > 0) {
                            annotation.url = currentUrl;
                            //jQuery.post("./annotations/create.php", JSON.parse(JSON.stringify(annotation)), function(data) {
                            jQuery.post("/annotation_create", JSON.parse(JSON.stringify(annotation)), function(data) {
                                console.log(data);

                                if (data == "false") {
                                    // Time has run out, force a reload. Annotation blocked client side.
                                    window.location.reload();
                                }

                                annotation.id = data;

                                jQuery(annotation.highlights).attr("data-annotation-id", annotation.id);
                                jQuery(annotation.highlights).attr("id", "annotation_" + annotation.id);
                                jQuery(annotation.highlights).addClass("annotation_" + annotation.id);
                            });
                        }
                    })
                    .subscribe("annotationDeleted", function(annotation) {
                        // Check if the annotation actually exists (workaround annotatorjs bug #258).
                        if (annotation.id) {
                            var post_data = {
                                id: annotation.id
                            };
                            // jQuery.post("./annotations/delete.php", post_data, function(data) {
                            jQuery.post("/annotation_delete", post_data, function(data) {
                                if (data == 1) {
                                    console.log("Successful deletion");
                                } else {
                                    console.error("Unsuccessful deletion");
                                }
                            });
                        } else {
                            // Event was called when user clicked cancel. Do nothing.
                        }
                    })
                    .subscribe("annotationUpdated", function(annotation) {
                        //jQuery.post("./annotations/update.php", JSON.parse(JSON.stringify(annotation)), function(data) {
                        jQuery.post("/annotation_update", JSON.parse(JSON.stringify(annotation)), function(data) {
                            if (data === 0) {} else {
                                console.log("Successful Edit");
                            }
                        });
                    })
            }
        };
    };

    var example1; //Taggle instance to be saved here

    var currentUrl = "1"; // Default mode is grammar analysis

    var firstOrder = ["--",
        "Carrier",
        "Actor/Subject/Theme", "Extent/Adjunct",
        "Pr:Material", "Scope/Complement",
        "Cause/Adjunct", "Carrier/Subject/Theme",
        "Subject", "Senser",
        "Mental Process", "Phenomenon",
        "Finite/Predicator", "Complement",
        "Declarative Mood", "Rheme",
        "Pr:Relational", "Attribute(Location)/Complement",
        "Textual Theme", "Sensor/Subject/Theme",
        "Goal", "Pr:Mental", "Phenomenon/Complement",
        "Circ:Manner", "Circ:Cause",
        "&", "Circumstance",
        "Participant", "Process",
        "Contingency", "Contingency/Subject",
        "Goal/Subject", "Actor",
        "Actor/Subject", "Senser/Subject",
        "Pr:Material/Theme", "A",
        "Experiential Meaning", "Interpersonal Meaning",
        "Textual Meaning", "Experiential Theme"
    ];

    var secondOrder = ["Ngp",
        "PP",
        "Pgp",
        "Clause",
        "Adjgp",
        "Qtgp",
        "GP",
        "Vgp"
    ];

    var thirdOrder = ["pd", "v",
        "qd", "dd",
        "m", "th",
        "q", "P",
        "cv", "t",
        "a", "sc",
        "f", "ad",
        "am", "po",
        "g", "F/Aux",
        "Aux", "E",
        "N", "F"
    ];

    /*
     * Loads data for trees, and takes a function as an argument 
     * which is called on the generated trees
     * @param function callback
     * @return nil
     */
    function loadDataForTrees(callback, url_) {
        //jQuery.post("./annotations/load.php", {url:url_}, function(data) {
        jQuery.post("/annotations_load", {
            url: "1"
        }, function(data) {
            if (data === 0) {
                console.log("Error connecting to Database");
            }
            console.log("fired");
            callback(generateTrees(JSON.parse(data)));
        });
    }

    /*
     * Takes array of annotations and creates necessary tree 
     * structure from them.
     * @param array dat_
     * @return array of nodes and ranges
     */
    function generateTrees(dat_) {

        var nodeStructure; //Will contain node structure of tree
        var rangeLengths = new Array(dat_.length); // List to hold lengths of ranges 
        var ranges = new Array(dat_.length); // List to hold range positions
        var nodes = new Array(dat_.length);

        for (var k = 0; k < dat_.length; k++) {

            if (dat_[k].text.length <= 1) {
                dat_[k].text = dat_[k].text[0]; // Convert taggle object to text
            }
            rangeLengths[k] = (dat_[k].ranges[0].endOffset - dat_[k].ranges[0].startOffset); // Calculate length of annotation
        }
        bubbleSortRanges(rangeLengths, dat_);

        for (var k = 0; k < dat_.length; k++) {

            ranges[k] = new Object();
            ranges[k].start = dat_[k].ranges[0].startOffset;
            ranges[k].end = dat_[k].ranges[0].endOffset;
            ranges[k].done = false; //Something to show whether or not its been added       
        }

        for (var k = 0; k < dat_.length; k++) { //Create nodes from annotations

            nodes[k] = nodify(dat_[k]);
        }

        // Build up tree here
        for (var i = 1; i < dat_.length; i++) {

            for (var j = 0; j < i; j++) {

                if ((ranges[j].start >= ranges[i].start) && (ranges[j].end <= ranges[i].end) && (!ranges[j].done)) {
                    if (!nodes[i].children) {
                        nodes[i].children = new Array();
                    }
                    nodes[i].children.push(nodes[j]);
                    ranges[j].done = true;
                }
            }
            if (nodes[i].children) { // If this node now has children, order them
                nodes[i].children = orderChildren(nodes[i].children);
            }
        }
        return [nodes, ranges];
    }

    /*
     * Function that takes data consisting of the tree structures in the document
     * and the ranges; which dictate whether they are root nodes or not.
     * It then generates the Treant tree svg and adds it to the document.
     * @param array of nodes and ranges
     * @return nil
     */
    function addTreesToDocument(data) {

        var nodes = data[0];
        var ranges = data[1];

        $('#allTrees').empty();

        // Initiliase Treant tree object and display
        for (var k = 0; k < nodes.length; k++) {

            if (!nodes[k].children) {
                ranges[k].done = true;
            }

            if (!ranges[k].done) {
                delete nodes[k].range;
                nodes[k] = traverse(nodes[k]);
                var totalDepth = getDepth(nodes[k], 0);
                nodes[k] = finalTraversal(nodes[k], 0, totalDepth);
                var levelSep = 30;

                $("#allTrees").append('<div class="chart" id="basic-example' + k + '"></div>').show();

                var chart_config = { //Initailize tree object
                    chart: {
                        container: "#basic-example" + k + "",
                        nodeAlign: 'BOTTOM',
                        connectors: {
                            type: 'straight'
                        },
                        node: {
                            HTMLclass: 'nodeExample1'
                        },
                        animateOnInit: false,
                        siblingSeparation: 10,
                        levelSeparation: levelSep
                    },
                    nodeStructure: nodes[k]
                };
                new Treant(chart_config);
            }
        }
    }

    /*
     * Function that takes data consisting of the tree structures in the document
     * and the ranges; which dictate whether they are root nodes or not.
     * It then generates the box diagrams as tables and adds them to the document.
     * @param array of nodes and ranges
     * @return nil
     */
    function addBoxDiagramsToDocument(data) {
        var nodes = data[0];
        var ranges = data[1];

        $('#allBoxes').hide(500);
        $('#allBoxes').empty();

        for (var k = 0; k < nodes.length; k++) {

            if (!nodes[k].children) {
                ranges[k].done = true;
            }

            if (!ranges[k].done) {

                if (nodes[k].text.name == "Clause" | nodes[k].text.name == "clause") {
                    var heading = "Box Diagram for Clause '" + nodes[k].text.title + "'";
                    var row1 = "<tr>";
                    var row2 = "<tr>";

                    for (var t = 0; t < nodes[k].children.length; t++) {
                        row1 += "<td><i>" + nodes[k].children[t].text.title + "</i></td>";

                        if (Array.isArray(nodes[k].children[t].text.name)) {
                            row2 += "<td>" + nodes[k].children[t].text.name[0] + "</td>";
                        } else {
                            row2 += "<td>" + nodes[k].children[t].text.name + "</td>";
                        }
                    }

                    row1 += "</tr>";
                    row2 += "</tr>";

                    var table = '<table class="box-diagram" id="box-diagram-' + k + '" align="center" style="width:50%">' + row1 + row2 + '</table><br>';

                    $("#allBoxes").append(table).show(1000);
                }
            }
        }
    }

    /*
     * Function that takes data consisting of the tree structures in the document
     * and the ranges; which dictate whether they are root nodes or not.
     * It then generates the theme diagrams as tables and adds them to the document.
     * @param array of nodes and ranges
     * @return nil
     */
    function addThemeDiagramsToDocument(data) {
        var nodes = data[0];
        var ranges = data[1];

        $('#allBoxes').hide(500);
        $('#allBoxes').empty();

        for (var k = 0; k < nodes.length; k++) {

            if (!nodes[k].children) {
                ranges[k].done = true;
            }

            if (!ranges[k].done) {

                if (nodes[k].text.name == "Clause" | nodes[k].text.name == "clause") {
                    var heading = "Theme Diagram for Clause '" + nodes[k].text.title + "'";
                    var row1 = "<tr><td>Textual Meaning<td/>";
                    var row2 = '<tr><td rowspan="2">Interpersonal Meaning<td/>';
                    var row3 = "<tr><td></td>";
                    var row4 = "<tr><td>Experiential Meaning<td/>";

                    for (var t = 0; t < nodes[k].children.length; t++) {

                        if (nodes[k].children[t].text.name[0] == "Interpersonal Meaning") {

                            for (var r = 0; r < nodes[k].children[t].children.length; r++) {

                                if ((nodes[k].children[t].children[r].text.name[1] == "Interpersonal Meaning")) {
                                    row1 += "<td></td>";
                                    if (nodes[k].children[t].children[r].text.name[2] == "Experiential Meaning") {
                                        row2 += "<td></td>";
                                        if (nodes[k].children[t].children[r].text.name.length == 3) {
                                            row4 += "<td></td>";
                                        } else {
                                            row4 += "<td>" + nodes[k].children[t].children[r].text.name[3] + "</td>";
                                        }
                                    } else {
                                        row2 += "<td>" + nodes[k].children[t].children[r].text.name[2] + "</td>";
                                        if (nodes[k].children[t].children[r].text.name.length == 4) {
                                            row4 += "<td></td>";
                                        } else {
                                            row4 += "<td>" + nodes[k].children[t].children[r].text.name[4] + "</td>";
                                        }
                                    }
                                } else {
                                    row1 += "<td>" + nodes[k].children[t].children[r].text.name[1] + "</td>";
                                    if (nodes[k].children[t].children[r].text.name[3] == "Experiential Meaning") {
                                        row2 += "<td></td>";
                                        if (nodes[k].children[t].children[r].text.name.length == 4) {
                                            row4 += "<td></td>";
                                        } else {
                                            row4 += "<td>" + nodes[k].children[t].children[r].text.name[4] + "</td>";
                                        }
                                    } else {
                                        row2 += "<td>" + nodes[k].children[t].children[r].text.name[3] + "</td>";
                                        if (nodes[k].children[t].children[r].text.name.length == 5) {
                                            row4 += "<td></td>";
                                        } else {
                                            row4 += "<td>" + nodes[k].children[t].children[r].text.name[5] + "</td>";
                                        }
                                    }
                                }
                            }
                            row3 += '<td colspan="' + nodes[k].children[t].children.length + '">' + nodes[k].children[t].text.name[1] + '</td>';
                        } else {
                            row3 += "<td></td>";
                            if ((nodes[k].children[t].text.name[1] == "Interpersonal Meaning")) {
                                row1 += "<td></td>";
                                if (nodes[k].children[t].text.name[2] == "Experiential Meaning") {
                                    row2 += "<td></td>";
                                    if (nodes[k].children[t].text.name.length == 3) {
                                        row4 += "<td></td>";
                                    } else {
                                        row4 += "<td>" + nodes[k].children[t].text.name[3] + "</td>";
                                    }
                                } else {
                                    row2 += "<td>" + nodes[k].children[t].text.name[2] + "</td>";
                                    if (nodes[k].children[t].text.name.length == 4) {
                                        row4 += "<td></td>";
                                    } else {
                                        row4 += "<td>" + nodes[k].children[t].text.name[4] + "</td>";
                                    }
                                }
                            } else {
                                row1 += "<td>" + nodes[k].children[t].text.name[1] + "</td>";
                                if (nodes[k].children[t].text.name[3] == "Experiential Meaning") {
                                    row2 += "<td></td>";
                                    if (nodes[k].children[t].text.name.length == 4) {
                                        row4 += "<td></td>";
                                    } else {
                                        row4 += "<td>" + nodes[k].children[t].text.name[4] + "</td>";
                                    }
                                } else {
                                    row2 += "<td>" + nodes[k].children[t].text.name[3] + "</td>";
                                    if (nodes[k].children[t].text.name.length == 5) {
                                        row4 += "<td></td>";
                                    } else {
                                        row4 += "<td>" + nodes[k].children[t].text.name[5] + "</td>";
                                    }
                                }
                            }
                        }
                    }

                    row1 += "</tr>";
                    row2 += "</tr>";
                    row3 += "</tr>";
                    row4 += "</tr>";

                    var table = '<table class="box-diagram" id="box-diagram-' + k + '" align="center" style="width:50%">' + row4 + row2 + row3 + row1 + '</table><br>';

                    $("#allBoxes").append(table).show(1000);
                }
            }
        }
    }

    /*
     * Takes an annotation object, and converts it to a node
     * that can be added to the nodeStructure
     * @param annotation obj
     * @return node obj
     */
    function nodify(annotation) {
        node = new Object();
        node.text = {};
        node.text.name = annotation.text;
        node.text.title = annotation.quote;
        node.range = annotation.ranges[0].startOffset;
        return node;
    }

    /*
     * Takes array of a nodes children, and orders them according
     * to their ranges.
     * Then unset ranges to allow proper tree generation
     * @param children array
     * @return none
     */
    function orderChildren(children) {
        var childRanges = new Array(children.length);
        for (var q = 0; q < children.length; q++) {
            childRanges[q] = children[q].range;
            delete children[q].range;
        }
        bubbleSortRanges(childRanges, children);
        return children;
    }

    /*
     * Traverses tree from given node, calling method to vertically order
     * nodes where more than one tag
     * @param node object 
     * @return none
     */
    function traverse(node) {

        if ((node.text) && (node.text.name instanceof Array)) { // If array of tags: (more than one tag)
            //
            var depth = node.text.name.length;
            var place = new Array(depth);
            for (var r = 0; r < depth; r++) {
                place[r] = node.text.name[r];
            }
            var even = false;
            if (depth % 2 == 0) {
                even = true;
            } else {
                depth--;
            }

            var start = '<p><b> <span style="line-height: 12px;background: linear-gradient(0deg, black 1px, white 1px, transparent 1px);padding-bottom: 2px;background-position: 0 100%">';
            var middle = '</style></b></p><p><b>';
            var end = '</b></p>';

            if (even) { //If even number of tags

                nodeArr = new Array(depth / 2);
                for (var t = 0; t < depth - 1; t += 2) {
                    nodeArr[t / 2] = new Object();
                    nodeArr[t / 2].innerHTML = start + place[t] + middle + place[t + 1] + end;
                }

                if (node.children) {
                    nodeArr[nodeArr.length - 1].children = new Array();
                    nodeArr[nodeArr.length - 1].children = node.children;
                }

                for (var q = nodeArr.length - 2; q >= 0; q--) {
                    nodeArr[q].children = new Array();
                    nodeArr[q].children.push(nodeArr[q + 1]);
                }
                node = nodeArr[0];

                if (!node.children) { // No Children
                    return node;
                } else { //If odd number of tags

                    if (node.text) { //Delete annotation quote from all nodes except childless children
                        delete node.text.title;
                    }

                    var numChild = node.children.length;
                    for (var h = 0; h < numChild; h++) {
                        node.children[h] = traverse(node.children[h]);
                    }
                    return node;
                }
            } else {

                var oddNode = new Object();
                oddNode.text = {};
                oddNode.text.name = place.pop();
                oddNode.text.title = node.text.title;

                nodeArr = new Array(depth / 2);
                for (var t = 0; t < depth - 1; t += 2) {
                    nodeArr[t / 2] = new Object();
                    nodeArr[t / 2].innerHTML = start + place[t] + middle + place[t + 1] + end;
                }

                if (node.children) {
                    oddNode.children = new Array();
                    oddNode.children = node.children;
                }
                nodeArr[nodeArr.length - 1].children = new Array();
                nodeArr[nodeArr.length - 1].children.push(oddNode);

                for (var q = nodeArr.length - 2; q >= 0; q--) {
                    nodeArr[q].children = new Array();
                    nodeArr[q].children.push(nodeArr[q + 1]);
                }
                node = nodeArr[0];

                if (!node.children) { // No Children
                    return node;
                } else {

                    if (node.text) { //Delete annotation quote from all nodes except childless children
                        delete node.text.title;
                    }
                    var numChild = node.children.length;
                    for (var h = 0; h < numChild; h++) {
                        node.children[h] = traverse(node.children[h]);
                    }
                    return node;
                }
            }
        } else {

            if (!node.children) { // No Children
                return node;
            } else {
                if (node.text) { //Delete annotation quote from all nodes except childless children
                    delete node.text.title;
                }
                var numChild = node.children.length;
                for (var h = 0; h < numChild; h++) {
                    node.children[h] = traverse(node.children[h]);
                }
                return node;
            }
        }
    }

    /*
     * Method to return maximum depth of tree
     * @param node object, int depth
     * @return int depth
     */
    function getDepth(node, depth) {
        depth++;
        if (!node.children) { // No Children

            return depth;
        } else {
            var numChild = node.children.length;
            var maxDepth = depth;
            for (var h = 0; h < numChild; h++) {
                var nextDepth = getDepth(node.children[h], depth);
                if (maxDepth < nextDepth) {
                    maxDepth = nextDepth;
                }
            }
            return maxDepth;
        }
    }

    /*
     * Method to draw triangles in lowest level of tree
     * @param node object, int depth, int totalDepth
     * @return node object
     */
    function finalTraversal(node, depth, totalDepth) {
        depth++;
        if (!node.children) { // If no Children
            //alert(JSON.stringify(node));
            var p = $(document.createElement('p'));
            p.css("display", "inline-block");
            p.css("font-size", "12px");
            p.text(node.text.title);
            p.attr("id", "p1");
            $("body").append(p);
            var width = $('#p1').width();
            $('#p1').remove();

            //height = 50*(1+(totalDepth-depth));
            height = 30;
            width = Math.ceil(width); //Ceiling of width in pixels
            width += 10; //Min width
            if (width % 2 != 0) {
                width++;
            }
            var a = '<p><b>' + node.text.name + '</b></p><svg width="';
            var b = '" height="' + height + '"><polygon points="';
            var c = ',1 0,' + height + ' ';
            var d = ',' + height + ' "style="fill:white;stroke:black;stroke-width:1;fill-rule:evenodd;" />SVG Not supported.</svg><p>' + node.text.title + '</p>';
            var total = a + String(width) + b + String(width / 2) + c + String(width) + d; //Generate triangle and text below
            delete node.text;
            node.innerHTML = total;
            node.HTMLclass = 'nodeExample2';
            return node;
        } else {
            var numChild = node.children.length;
            for (var h = 0; h < numChild; h++) {
                node.children[h] = finalTraversal(node.children[h], depth, totalDepth);
            }
            return node;
        }
    }


    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    /*
     * Function to use bubble sort to arrange an array/list from smallest to largest
     * Sorts an array containing the ranges of the annotations
     * Every time a swap is made, the swap is mirrored in the second array passed
     * Parameter
     */
    function bubbleSortRanges(a, dat) {
        var swapped;
        do {
            swapped = false;
            for (var i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    var temp = a[i];
                    var temp2 = dat[i];
                    a[i] = a[i + 1];
                    dat[i] = dat[i + 1];
                    a[i + 1] = temp;
                    dat[i + 1] = temp2;
                    swapped = true;
                }
            }
        } while (swapped);
    }

</script>

<script type="text/coffeescript">
    # Attept at error handling for touch devices. window.onerror = (msg, file, line) -> alert(msg + ' ' + file + ' ' + line) jQuery.ajaxSetup async: false modules = jQuery.trim """ touch touch/utils touch/editor touch/viewer """ modules = modules.split(/\s+/) run = (file, source) -> filename = file.replace /coffee$/, "js" compiled = "#{CoffeeScript.compile(source)}\n//@ sourceURL=#{filename}" eval(compiled) sources = ("./src/#{script}.coffee" for script in modules) requests = jQuery.map sources, (script) -> jQuery.get script, jQuery.proxy(run, this, script) jQuery.when.apply(jQuery, requests).done -> jQuery("#content").annotator().annotator('addPlugin', 'Touch', { force: location.search.indexOf('force') > -1, useHighlighter: location.search.indexOf('highlighter') > -1 }) window.annotator = jQuery("#content").data('annotator')
</script>
